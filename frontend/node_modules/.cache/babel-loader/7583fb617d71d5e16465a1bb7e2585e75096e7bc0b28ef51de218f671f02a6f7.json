{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Scott\\\\OneDrive\\\\Programming\\\\chatgpt-webapp-test\\\\frontend\\\\src\\\\components\\\\Applet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar appletView = {\n  value: \"home\"\n};\nfunction Applet() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    title: '',\n    description: ''\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [renderView, setRenderView] = useState({\n    value: ''\n  });\n\n  // // Fetch tasks on component mount\n  // useEffect(() => {\n  //   fetchTasks();\n  // }, []);\n\n  // // Fetch all tasks from the back-end API\n  // const fetchTasks = async () => {\n  //   try {\n  //     const response = await axios.get('http://localhost:3000/tasks');\n  //     setTasks(response.data);\n  //   } catch (err) {\n  //     console.error('Error fetching tasks:', err);\n  //   }\n  // };\n\n  // // Handle form input for new tasks\n  // const handleInputChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setNewTask((prev) => ({\n  //     ...prev,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // // Create a new task\n  // const addTask = async () => {\n  //   try {\n  //     const response = await axios.post('http://localhost:3000/tasks', newTask);\n  //     setTasks([...tasks, response.data]);\n  //     setNewTask({ title: '', description: '' });\n  //   } catch (err) {\n  //     console.error('Error adding task:', err);\n  //   }\n  // };\n\n  // // Delete a task\n  // const deleteTask = async (id) => {\n  //   try {\n  //     await axios.delete(`http://localhost:3000/tasks/${id}`);\n  //     setTasks(tasks.filter((task) => task.id !== id));\n  //   } catch (err) {\n  //     console.error('Error deleting task:', err);\n  //   }\n  // };\n\n  // // Update a task\n  // const updateTask = async () => {\n  //   try {\n  //     const response = await axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask);\n  //     setTasks(tasks.map((task) => (task.id === currentTask.id ? response.data : task)));\n  //     setIsEditing(false);\n  //     setCurrentTask(null);\n  //   } catch (err) {\n  //     console.error('Error updating task:', err);\n  //   }\n  // };\n\n  // // Set current task for editing\n  // const handleEdit = (task) => {\n  //   setCurrentTask(task);\n  //   setIsEditing(true);\n  // };\n\n  // // Handle form input for editing tasks\n  // const handleEditChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setCurrentTask((prev) => ({\n  //     ...prev,\n  //     [name]: value,\n  //   }));\n  // };\n\n  const renderAppletView = () => {\n    console.log(\"[APPLET] Setting Applet View. Var 'appletView' = \" + appletView.value);\n    switch (appletView.value) {\n      case 'home':\n        setRenderView({\n          value: \"<div id='test'>'Hello world   1'</div>\"\n        });\n        break;\n      case 'clients':\n        // /* Update Existing Task */\n        // if (isEditing === true) {\n        //   // <div className=\"card mb-4 p-3\">\n        //   //   <h2 className=\"mb-3\">Edit Task</h2>\n        //   //   <input\n        //   //     type=\"text\"\n        //   //     name=\"title\"\n        //   //     placeholder=\"Task title\"\n        //   //     className=\"form-control mb-3\"\n        //   //     value={currentTask.title}\n        //   //     onChange={handleEditChange}\n        //   //   />\n        //   //   <textarea\n        //   //     name=\"description\"\n        //   //     placeholder=\"Task description\"\n        //   //     className=\"form-control mb-3\"\n        //   //     value={currentTask.description}\n        //   //     onChange={handleEditChange}\n        //   //   />\n        //   //   <button className=\"btn btn-success\" onClick={updateTask}>Update Task</button>\n        //   // </div>\n        // };\n\n        // /* Display Tasks */\n        // <div className=\"list-group\">\n        //   {tasks.map((task) => (\n        //     <div className=\"list-group-item d-flex justify-content-between align-items-center\" key={task.id}>\n        //       <div>\n        //         <h5>{task.title}</h5>\n        //         <p>{task.description}</p>\n        //       </div>\n        //       <div>\n        //         <button className=\"btn btn-danger\" onClick={() => deleteTask(task.id)}>Delete</button>\n        //         <button className=\"btn btn-secondary ms-2\" onClick={() => handleEdit(task)}>Edit</button>\n        //       </div>\n        //     </div>\n        //   ))}\n        // </div>\n        setRenderView({\n          value: \"<div id='test'>'Hello world   2'</div>\"\n        });\n        break;\n      case 'new-client':\n        /* --+-- ADD NEW CLIENT--+-- */\n        // <div className=\"card mb-4 p-3\">\n        //   <h2 className=\"mb-3\">Add New Task</h2>\n        //   <input\n        //     type=\"text\"\n        //     name=\"title\"\n        //     placeholder=\"Task title\"\n        //     className=\"form-control mb-3\"\n        //     value={newTask.title}\n        //     onChange={handleInputChange}\n        //   />\n        //   <textarea\n        //     name=\"description\"\n        //     placeholder=\"Task description\"\n        //     className=\"form-control mb-3\"\n        //     value={newTask.description}\n        //     onChange={handleInputChange}\n        //   />\n        //   <button className=\"btn btn-primary\" onClick={addTask}>Add Task</button>\n        // </div>\n        setRenderView({\n          value: \"<div id='test'>'Hello world   3'</div>\"\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"applet\",\n    className: \"App container col\",\n    children: [console.log(\"[APPLET] Rendering Applet View:\"), renderView.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(Applet, \"xF/yqTSZVF3D2JZgO9zVKmau2lc=\");\n_c = Applet;\nexport { appletView };\nexport default Applet;\nvar _c;\n$RefreshReg$(_c, \"Applet\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","appletView","value","Applet","_s","tasks","setTasks","newTask","setNewTask","title","description","isEditing","setIsEditing","currentTask","setCurrentTask","renderView","setRenderView","renderAppletView","console","log","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Scott/OneDrive/Programming/chatgpt-webapp-test/frontend/src/components/Applet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar appletView = {value: \"home\"};\n\nfunction Applet() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({ title: '', description: '' });\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n\n  \n  const [renderView, setRenderView] = useState({value: ''});\n\n  // // Fetch tasks on component mount\n  // useEffect(() => {\n  //   fetchTasks();\n  // }, []);\n\n  // // Fetch all tasks from the back-end API\n  // const fetchTasks = async () => {\n  //   try {\n  //     const response = await axios.get('http://localhost:3000/tasks');\n  //     setTasks(response.data);\n  //   } catch (err) {\n  //     console.error('Error fetching tasks:', err);\n  //   }\n  // };\n\n  // // Handle form input for new tasks\n  // const handleInputChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setNewTask((prev) => ({\n  //     ...prev,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // // Create a new task\n  // const addTask = async () => {\n  //   try {\n  //     const response = await axios.post('http://localhost:3000/tasks', newTask);\n  //     setTasks([...tasks, response.data]);\n  //     setNewTask({ title: '', description: '' });\n  //   } catch (err) {\n  //     console.error('Error adding task:', err);\n  //   }\n  // };\n\n  // // Delete a task\n  // const deleteTask = async (id) => {\n  //   try {\n  //     await axios.delete(`http://localhost:3000/tasks/${id}`);\n  //     setTasks(tasks.filter((task) => task.id !== id));\n  //   } catch (err) {\n  //     console.error('Error deleting task:', err);\n  //   }\n  // };\n\n  // // Update a task\n  // const updateTask = async () => {\n  //   try {\n  //     const response = await axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask);\n  //     setTasks(tasks.map((task) => (task.id === currentTask.id ? response.data : task)));\n  //     setIsEditing(false);\n  //     setCurrentTask(null);\n  //   } catch (err) {\n  //     console.error('Error updating task:', err);\n  //   }\n  // };\n\n  // // Set current task for editing\n  // const handleEdit = (task) => {\n  //   setCurrentTask(task);\n  //   setIsEditing(true);\n  // };\n\n  // // Handle form input for editing tasks\n  // const handleEditChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setCurrentTask((prev) => ({\n  //     ...prev,\n  //     [name]: value,\n  //   }));\n  // };\n\n\n\n  const renderAppletView = () => {\n    \n    console.log(\"[APPLET] Setting Applet View. Var 'appletView' = \" + appletView.value);\n\n    switch (appletView.value) {\n\n      case 'home':\n        setRenderView({value: \"<div id='test'>'Hello world   1'</div>\"});\n        break;\n\n\n      case 'clients':\n        // /* Update Existing Task */\n        // if (isEditing === true) {\n        //   // <div className=\"card mb-4 p-3\">\n        //   //   <h2 className=\"mb-3\">Edit Task</h2>\n        //   //   <input\n        //   //     type=\"text\"\n        //   //     name=\"title\"\n        //   //     placeholder=\"Task title\"\n        //   //     className=\"form-control mb-3\"\n        //   //     value={currentTask.title}\n        //   //     onChange={handleEditChange}\n        //   //   />\n        //   //   <textarea\n        //   //     name=\"description\"\n        //   //     placeholder=\"Task description\"\n        //   //     className=\"form-control mb-3\"\n        //   //     value={currentTask.description}\n        //   //     onChange={handleEditChange}\n        //   //   />\n        //   //   <button className=\"btn btn-success\" onClick={updateTask}>Update Task</button>\n        //   // </div>\n        // };\n\n        // /* Display Tasks */\n        // <div className=\"list-group\">\n        //   {tasks.map((task) => (\n        //     <div className=\"list-group-item d-flex justify-content-between align-items-center\" key={task.id}>\n        //       <div>\n        //         <h5>{task.title}</h5>\n        //         <p>{task.description}</p>\n        //       </div>\n        //       <div>\n        //         <button className=\"btn btn-danger\" onClick={() => deleteTask(task.id)}>Delete</button>\n        //         <button className=\"btn btn-secondary ms-2\" onClick={() => handleEdit(task)}>Edit</button>\n        //       </div>\n        //     </div>\n        //   ))}\n        // </div>\n        setRenderView({value: \"<div id='test'>'Hello world   2'</div>\"});\n        break;\n\n      case 'new-client':\n\n        /* --+-- ADD NEW CLIENT--+-- */\n        // <div className=\"card mb-4 p-3\">\n        //   <h2 className=\"mb-3\">Add New Task</h2>\n        //   <input\n        //     type=\"text\"\n        //     name=\"title\"\n        //     placeholder=\"Task title\"\n        //     className=\"form-control mb-3\"\n        //     value={newTask.title}\n        //     onChange={handleInputChange}\n        //   />\n        //   <textarea\n        //     name=\"description\"\n        //     placeholder=\"Task description\"\n        //     className=\"form-control mb-3\"\n        //     value={newTask.description}\n        //     onChange={handleInputChange}\n        //   />\n        //   <button className=\"btn btn-primary\" onClick={addTask}>Add Task</button>\n        // </div>\n        setRenderView({value: \"<div id='test'>'Hello world   3'</div>\"});\n        break;\n\n      default:\n        break;\n    }\n\n\n\n  };\n\n  return (\n    <div id=\"applet\" className=\"App container col\">\n\n      {console.log(\"[APPLET] Rendering Applet View:\")}\n      {/* {renderAppletView()} */}\n      {renderView.value}\n\n    </div>\n  );\n}\n\nexport { appletView };\nexport default Applet;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,IAAIC,UAAU,GAAG;EAACC,KAAK,EAAE;AAAM,CAAC;AAEhC,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,KAAK,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAG,CAAC,CAAC;EACtE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAGpD,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC;IAACM,KAAK,EAAE;EAAE,CAAC,CAAC;;EAEzD;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;IAE7BC,OAAO,CAACC,GAAG,CAAC,mDAAmD,GAAGlB,UAAU,CAACC,KAAK,CAAC;IAEnF,QAAQD,UAAU,CAACC,KAAK;MAEtB,KAAK,MAAM;QACTc,aAAa,CAAC;UAACd,KAAK,EAAE;QAAwC,CAAC,CAAC;QAChE;MAGF,KAAK,SAAS;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAc,aAAa,CAAC;UAACd,KAAK,EAAE;QAAwC,CAAC,CAAC;QAChE;MAEF,KAAK,YAAY;QAEf;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAc,aAAa,CAAC;UAACd,KAAK,EAAE;QAAwC,CAAC,CAAC;QAChE;MAEF;QACE;IACJ;EAIF,CAAC;EAED,oBACEF,OAAA;IAAKoB,EAAE,EAAC,QAAQ;IAACC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,GAE3CJ,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,EAE9CJ,UAAU,CAACb,KAAK;EAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEd,CAAC;AAEV;AAACtB,EAAA,CAlLQD,MAAM;AAAAwB,EAAA,GAANxB,MAAM;AAoLf,SAASF,UAAU;AACnB,eAAeE,MAAM;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}