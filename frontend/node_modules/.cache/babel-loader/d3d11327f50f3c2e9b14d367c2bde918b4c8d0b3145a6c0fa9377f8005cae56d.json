{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Scott\\\\OneDrive\\\\Programming\\\\chatgpt-webapp-test\\\\frontend\\\\src\\\\components\\\\views\\\\Applet-Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { SharedStateContext } from './../_SharedStateComponent';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function AppletSettings() {\n  _s();\n  const {\n    setActiveHue\n  } = useContext(SharedStateContext);\n  const setHue = hue => {\n    try {\n      if (hue === 200) {\n        hue = 100;\n      } else {\n        hue = 200;\n      }\n      setActiveHue(hue);\n    } catch (err) {\n      console.log(\"Error setting the active hue from the settings menu\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: setHue(setActiveHue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}\n_s(AppletSettings, \"hjB1GBxPB68i773XVr9XMpZqPVQ=\");\n_c = AppletSettings;\n;\nvar _c;\n$RefreshReg$(_c, \"AppletSettings\");","map":{"version":3,"names":["React","useContext","useState","useEffect","SharedStateContext","jsxDEV","_jsxDEV","Fragment","_Fragment","AppletSettings","_s","setActiveHue","setHue","hue","err","console","log","children","onclick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Scott/OneDrive/Programming/chatgpt-webapp-test/frontend/src/components/views/Applet-Settings.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { SharedStateContext } from './../_SharedStateComponent';\r\n\r\n\r\nexport function AppletSettings(){\r\n\r\n\tconst { setActiveHue } = useContext(SharedStateContext);\r\n\r\n\tconst setHue = (hue) => {\t\r\n\t\ttry {\r\n\r\n\t\t\tif (hue === 200) {\r\n\t\t\t\thue = 100;\r\n\t\t\t} else {\r\n\t\t\t\thue = 200;\r\n\t\t\t}\r\n\t\t\tsetActiveHue(hue);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"Error setting the active hue from the settings menu\", err);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<button onclick={setHue(setActiveHue)}></button>\r\n\t\t</>\r\n\t);\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,kBAAkB,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGhE,OAAO,SAASC,cAAcA,CAAA,EAAE;EAAAC,EAAA;EAE/B,MAAM;IAAEC;EAAa,CAAC,GAAGV,UAAU,CAACG,kBAAkB,CAAC;EAEvD,MAAMQ,MAAM,GAAIC,GAAG,IAAK;IACvB,IAAI;MAEH,IAAIA,GAAG,KAAK,GAAG,EAAE;QAChBA,GAAG,GAAG,GAAG;MACV,CAAC,MAAM;QACNA,GAAG,GAAG,GAAG;MACV;MACAF,YAAY,CAACE,GAAG,CAAC;IAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACbC,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEF,GAAG,CAAC;IACxE;EACD,CAAC;EAED,oBACCR,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACAX,OAAA;MAAQY,OAAO,EAAEN,MAAM,CAACD,YAAY;IAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC,gBAC9C,CAAC;AAEL;AAACZ,EAAA,CAvBeD,cAAc;AAAAc,EAAA,GAAdd,cAAc;AAuB7B;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}